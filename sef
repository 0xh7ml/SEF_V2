#!/bin/bash
## Banner
function banner() {
    echo ""
    echo ""
    echo "  ░██████╗███████╗███████╗"
    echo "  ██╔════╝██╔════╝██╔════╝"
    echo "  ╚█████╗░█████╗░░█████╗░░"
    echo "  ░╚═══██╗██╔══╝░░██╔══╝░░"
    echo "  ██████╔╝███████╗██║░░░░░"
    echo "  ╚═════╝░╚══════╝╚═╝░░░░░ v2"
    echo ""
    echo "@0xh7ml"
    echo "Subdomain Enumeration Framework"
}

banner

## Variables
## notify_config=~/conf.yaml
resolvers=~/Tools/resolvers.txt
resolvers_trusted=~/Tools/resolvers_trusted.txt
wordlist=~/Tools/subdomains.txt
permute=~/Tools/permutations_list.txt
PUREDNS_PUBLIC_LIMIT=0
PUREDNS_TRUSTED_LIMIT=400
github=~/Tools/.github_tokens
## Function
function format_time() {
    ((h = ${1} / 3600))
    ((m = (${1} % 3600) / 60))
    ((s = ${1} % 60))
    printf "%02d:%02d:%02d\n" $h $m $s
}

function Tool_Check() {
    echo ""
    echo ""
    type -P subfinder &>/dev/null && echo "[*] Subfinder		YES	]" || { echo "[*] Subfinder		NO	]"; }
    type -P assetfinder &>/dev/null && echo "[*] Assetfinder		YES	]" || { echo "[*] Assetfinder		NO	]"; }
    type -P findomain &>/dev/null && echo "[*] Findomain		YES	]" || { echo "[*] Findomain		NO	]"; }
    type -P amass &>/dev/null && echo "[*] Amass		YES	]" || { echo "[*] Amass		NO	]"; }
    type -P gotator &>/dev/null && echo "[*] Gotator		YES	]" || { echo "[*] Gotator		NO	]"; }
    type -P crobat &>/dev/null && echo "[*] Crobat		YES	]" || { echo "[*] Crobat		NO	]"; }
    type -P github-subdomains &>/dev/null && echo "[*] Github Subdomains 	YES	]" || { echo "[*] Github Subdomains		NO	]"; }
    type -P puredns &>/dev/null && echo "[*] Puredns		YES	]" || { echo "[*] Puredns		NO	]"; }
    type -P anew &>/dev/null && echo "[*] Anew		YES	]" || { echo "[*] Anew		NO ]"; }
    type -P httpx &>/dev/null && echo "[*] Httpx		YES	]" || { echo "[*] Httpx		NO	]"; }
    echo ""
    echo ""
}

Tool_Check
function Passive() {
    echo "[=] Running Passive Enumeration"
    python3 ~/Tools/ctfr/ctfr.py -d $domain -o crtsh.txt &>/dev/null
    subfinder -d $domain -o subfinder.txt &>/dev/null
    assetfinder --subs-only $domain | sort -u >assetfinder.txt
    amass enum -passive -norecursive -noalts -d $domain -o amass.txt &>/dev/null
    findomain --quiet -t $domain -u findomain.txt &>/dev/null
    github-subdomains -t $github -d $domain -o github.txt &>/dev/null
    crobat -s $domain -u >>crobat.txt &>/dev/null
    cat subfinder.txt assetfinder.txt amass.txt findomain.txt github.txt crtsh.txt crobat.txt | grep -F ".$domain" | sort -u >passive.txt
    rm subfinder.txt assetfinder.txt amass.txt findomain.txt github.txt crtsh.txt crobat.txt
}

function Active() {
    echo "[=] Running Active Enumeration"
    puredns bruteforce $wordlist $domain -w active_tmp.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT &>/dev/null
    amass enum -brute -min-for-recursive 3 -d $domain -o amass_active_tmp.txt &>/dev/null
    cat active_tmp.txt amass_active_tmp.txt | grep -F ".$domain" | sed "s/*.//" >active.txt
    rm active_tmp.txt
}

function ActPsv() {
    echo "[=] Collecting Active & Passive Enum Result"
    cat active.txt passive.txt | grep -F ".$domain" | sort -u | puredns resolve -w active_passive.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT &>/dev/null
    rm active.txt passive.txt
}

function Permute() {
    if [[ $(cat active_passive.txt | wc -l) -le 100 ]]; then
        echo "[=] Running Dual Permute Enumeration"
        gotator -sub active_passive.txt -perm $permute -depth 1 -numbers 10 -mindup -adv -md | puredns resolve -w permute1_tmp.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT &>/dev/null
        cat permute1_tmp.txt | grep -F ".$domain" >permute1.txt
        gotator -sub permute1_tmp.txt -perm $permute -depth 1 -numbers 10 -mindup -adv -md | puredns resolve -w permute2_tmp.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT &>/dev/null
        cat permute2_tmp.txt | grep -F ".$domain" >permute2.txt
        cat permute1.txt permute2.txt | grep -F ".$domain" | sort -u >permute.txt
        rm permute1.txt permute1_tmp.txt permute2.txt permute2_tmp.txt
    elif [[ $(cat active_passive.txt | wc -l) -le 500 ]]; then
        echo "[=] Running Single Permute Enumeration"
        gotator -sub active_passive.txt -perm $permute -depth 1 -numbers 10 -mindup -adv -md | puredns resolve -w permute_tmp.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT &>/dev/null
        cat permute_tmp.txt | grep -F ".$domain" >permute.txt
        rm permute_tmp.txt
    else
        echo "[=] No Permutation"
    fi
}

function SubFinal() {
    echo "[=] Collecting Enumerated Final Result"
    cat active.txt passive.txt active_passive.txt permute.txt 2>/dev/null | grep -F ".$domain" | sort -u >sub.txt
}

function Output() {
    mkdir -p $dir
    mv active.txt passive.txt active_passive.txt permute.txt sub.txt sub.httpx $dir 2>/dev/null
}

function Htpx() {
    echo "[=] Running HTTPx"
    httpx -l sub.txt -timeout 20 -silent -o sub.httpx &>/dev/null
    httpx -l sub.txt -csp-probe -timeout 20 -silent | grep -F ".$domain" | anew sub.httpx &>/dev/null
    httpx -l sub.txt -tls-probe -timeout 20 -silent | grep -F ".$domain" | anew sub.httpx &>/dev/null
}

function sefresult() {
    echo ""
    echo ""
    echo "[#] Total Subdomain Found $(cat sub.txt | wc -l)" 
## notify -provider-config $notify_config -silent
    echo "[#] Total HTTP Probed Found $(cat sub.httpx | wc -l)" 
## notify -provider-config $notify_config -silent
    echo "[#] Script completed in total $(format_time $SECONDS)"
## notify -provider-config $notify_config -silent
}

function ggwp() {
    echo "$(date +"%b %d %a %r")"
## notify -provider-config $notify_config -silent
    echo -e "\nStarting scan $domain right now"
## notify -provider-config $notify_config -silent
}
while getopts ":hd:w:r:o:-:" optchar; do
    case "${optchar}" in
    -)
        case "${OPTARG}" in
        dLq)
            domain_list="${!OPTIND}"
            OPTIND=$(($OPTIND + 1))
            for site in $(cat $domain_list); do
                domain=$site
                dir=$site
                echo -e "\nStarting scan $domain right now"
## notify -provider-config $notify_config -silent
                Passive
                SubFinal
                Htpx
                sefresult
                Output
                echo -e "\n Scanning $domain done"
            done
            ;;
        dLa)
            domain_list="${!OPTIND}"
            OPTIND=$(($OPTIND + 1))
            for site in $(cat $domain_list); do
                domain=$site
                dir=$site
                echo -e "\n Scanning $domain right now"
                ggwp
                Passive
                Active
                ActPsv
                Permute
                SubFinal
                Htpx
                sefresult
                Output
                echo -e "\n Scanning $domain done"
            done
            ;;
        ac)
            amass_config="${!OPTIND}"
            OPTIND=$(($OPTIND + 1))
            ;;
        quick)
            Passive
            SubFinal
            Htpx
            sefresult
            ;;
        all)
            Passive
            Active
            ActPsv
            Permute
            SubFinal
            Htpx
            sefresult
            ;;
        *)
            if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                echo "Unknown option --${OPTARG}" >&2
            fi
            ;;
        esac
        ;;
    h)
        echo "Usage: 						"
        echo "       $0 -d       To Specify Domain."
        echo "       $0 -w       To Specify wordlist to use else (Default)."
        echo "       $0 -r       To Specify resolver to use else (Default)."
        echo "       $0 -o       To Store all the result in specific folder."
        echo "       $0 --dLq     To quick passive scan Domain-list."
        echo "       $0 --dLa     To full scan Domain-list."
        echo "       $0 --ac     To Specify Amass-config file."
        echo "       $0 --quick  To quicky perform passive scan of domain."
        echo "       $0 --all    To fully scan using all functionality."
        echo "	"
        echo "Example Usage:					"
        echo "	"
        echo "	Single Domain Scanning"
        echo "  \$ bash sef -d target.com -w wordlist.txt -r resolvers.txt --ac amass_config.ini --all -o target.com"
        echo "	"
        echo "  Domain-List Scanning"
        echo "  \$ bash sef -w wordlist.txt -r resolvers.txt --ac amass_config.ini --dLa domain_list.txt"
        exit 2
        ;;

    d)
        domain=$OPTARG
        ;;
    w)
        wordlist=$OPTARG
        ;;
    r)
        resolvers=$OPTARG
        ;;
    o)
        dir=$OPTARG
        Output
        ;;
    *)
        if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
            echo "Non-option argument: '-${OPTARG}'"
        fi
        ;;
    esac
done
